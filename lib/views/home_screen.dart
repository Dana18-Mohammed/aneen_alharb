// views/home_screen.dart
import 'package:flutter/material.dart';
import 'package:convex_bottom_bar/convex_bottom_bar.dart';
import 'dart:async';
import 'add_story_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'story_detail_screen.dart';
import 'explore_screen.dart';
import 'profile_screen.dart';
import 'inspiration_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  int _selectedIndex = 0;
  late AnimationController _animController;
  late Animation<double> _fadeAnim;
  late Animation<Offset> _slideAnim;
  late AnimationController _fabAnimController;
  late Animation<double> _fabScaleAnim;
  
  // ุชุญุณูู ุงูุฃุฏุงุก - ุฅุถุงูุฉ ูุชุบูุฑุงุช ููุชุฎุฒูู ุงููุคูุช
  int _cachedStoriesCount = 0;
  DateTime? _lastStoriesFetch;
  static const Duration _cacheDuration = Duration(minutes: 5);

  final List<Map<String, String>> recentStories = [
    {
      'title': 'ูุตุฉ ุฃูู',
      'type': 'ูุฌุงุฉ',
      'snippet': 'ูุฌูุช ูู ุงูุญุฑุจุ ููู ุงูุฐูุฑู ูุง ุชุบุงุฏุฑูู...',
      'image': 'assets/images/story1.png',
    },
    {
      'title': 'ุฐูุฑูุงุช ุชุญุช ุงูุฃููุงุถ',
      'type': 'ูุฒูุญ',
      'snippet': 'ุชุฑูุช ุจูุชู ูุฃุญูู ูุนู ุตูุฑ ุฃุทูุงูู...',
      'image': 'assets/images/story2.png',
    },
    {
      'title': 'ุทูู ูู ุงูุบุฏ',
      'type': 'ุดูุงุฏุฉ',
      'snippet': 'ูุงู ุญููู ุฃู ูุตุจุญ ุทุจูุจูุง...',
      'image': 'assets/images/story3.png',
    },
  ];

  final List<Map<String, String>> martyrsStories = [
    {
      'title': 'ุญูุงูุฉ ุงูุดููุฏ ูุญูุฏ', 
      'icon': '๐ฏ๏ธ',
      'description': 'ูุญูุฏ ูุงู ุดุงุจูุง ูุง ูุชุฌุงูุฒ ุงูุนุดุฑูู ูู ุนูุฑูุ ุนุงุด ุทูููุชู ูุณุท ุฃุฒูุฉ ุบุฒุฉ ุงูุถููุฉุ ุญูุซ ูุงู ุญููู ุงูุจุณูุท ุฃู ูููู ุชุนูููู ููุตุจุญ ูููุฏุณูุง ูุณุงุนุฏ ูู ุจูุงุก ูุทูู.\n\nูู ุตุจุงุญ ุฃุญุฏ ุงูุฃูุงูุ ุจูููุง ูุงู ูุญูุฏ ูุชุฌู ุฅูู ุฌุงูุนุชูุ ููุน ุงููุตู ูุฌุฃุฉ ุนูู ุงูุญู ุงูุฐู ูุณููู. ูุฑุน ูุญูุฏ ุฅูู ูุฃูู ุตุบูุฑ ูู ุงูููุฒูุ ููู ุงููุฐููุฉ ูุงูุช ุฃุณุฑุน. ููุฏ ูุญูุฏ ุญูุงุชู ููู ูุญุงูู ุญูุงูุฉ ุฃุณุฑุชูุ ุชุงุฑููุง ุฎููู ุญูููุง ูู ูููุชุจ ูู ุฃู ูุชุญูู.\n\nููู ุฑุบู ุฑุญูููุ ุชุจูู ูุตุชู ูุจุน ุฅููุงู ููู ูู ุนุฑูู. ุฒูุฑุชู ูู ุชุฐุจูุ ุจู ุงุฑุชูุนุช ุฅูู ุงูุณูุงุก ูุทูู ูุง ูููุชุ ุชุฐูุฑ ุงูุฌููุน ุฃู ุงูุฃูู ูุงููุฑุงูุฉ ูุง ููุชููุงู ูุน ุงูุบูุงุจ.\n\nุนุงุฆูุชู ูุฑูุญู ุงูุญูุฉ ุชุธู ุดุงูุฏุฉ ุนูู ุตููุฏ ุบุฒุฉุ ููุตุชู ุชูุฑูู ุจูู ุงูุฃุตุฏูุงุก ูุงูุทูุงุจ ูุฑูุฒ ููุดุฌุงุนุฉ ูุงูุฅุตุฑุงุฑ ุนูู ุงูุนูุด ุจูุฑุงูุฉ ุฑุบู ุงูุฃูู.'
    },
    {
      'title': 'ุฒูุฑุฉ ูู ุชููุช', 
      'icon': '๐น',
      'description': 'ุฃูุง ุฃู ุณุงุฑุฉุ ุทููุชู ุงูุตุบูุฑุฉ ุงูุชู ูุงูุช ุชููุฃ ุจูุชูุง ุจุงูุถุญู ูุงููุฑุญุ ูุงูุช ุฒูุฑุฉ ููุช ูุณุท ุตุฎูุฑ ุงูุฃูู. ูุงูุช ุชุดุจู ุงูุฑุจูุน ุจุจุฑุงุกุชูุงุ ุชููุฃ ุญูุงุชูุง ุฃููุงููุง ูุฃุญูุงููุง ุตุบูุฑุฉ.\n\nูู ุฐูู ุงูููู ุงูุฃุณูุฏุ ูุงูุช ุณุงุฑุฉ ุชูุนุจ ูู ููุงุก ุงูููุฒูุ ุชุฌูุน ุจุนุถ ุงูุฒููุฑ ุงูุตุบูุฑุฉ ุงูุชู ูุงูุช ุชุญุจูุง ูุซูุฑูุง. ูุงู ุงูุฌู ูุงุฏุฆูุง ูุณุจููุงุ ููู ูุชููุน ูุง ุณูุญุฏุซ ุจุนุฏ ูุญุธุงุช.\n\nูุฌุฃุฉุ ุณูุนูุง ุตูุช ุตูุงุฑุงุช ุงูุฅูุฐุงุฑุ ุซู ููุน ุงูุงููุฌุงุฑ ุจุงููุฑุจ ูู ุจูุชูุง. ุฑูุถุช ูุฃุฌูุจูุง ุจุณุฑุนุฉ ุฅูู ุฏุงุฎู ุงูููุฒูุ ููู ูู ุชูู ุงููุญุธุฉุ ุณูุทุช ูุฐููุฉ ุนูู ุงูุญู ุงูุฐู ูุนูุด ููู.\n\nุณูุทุช ุฌุฏุฑุงู ุงูููุฒูุ ูุบุจุงุฑ ูุซูู ููุฃ ุงูููุงู. ูุงู ุตูุช ุตุฑุงุฎ ุงูุฃุทูุงู ูุงููุณุงุก ูููุฃ ุงูุฃุฑุฌุงุก. ุญุงููุช ุฃู ุฃุฌุฏ ุณุงุฑุฉ ูุณุท ุงูุฑูุงูุ ููุฌุฏุชูุง ุชุญุช ุงูุฃููุงุถุ ุตุบูุฑุฉ ูุฌูููุฉุ ููู ุจูุง ุญุฑุงู.\n\nูู ุชุชุฑู ุณุงุฑุฉ ูุฐู ุงูุฏููุง ุฅูุง ุจุนุฏ ูุญุธุงุช ูู ุงูุฃููุ ููู ุฑูุญูุง ูุงูุช ูููุฉุ ูุฒูุฑุฉ ูู ุชุฐุจู. ุงุณุชุดูุฏุช ูุชููู ุฑูุฒูุง ููุจุฑุงุกุฉ ุงูุชู ูู ุชุณุชุทุน ุงูุญุฑุจ ุชุฏููุฑูุง.\n\nุฒูุฑุชู ูู ุชูุชุ ููู ูู ููุจู ููู ูู ุตูุช ุทูู ููุงุฏู ุจุงูุฃููุ ููู ูู ุญูู ูุฒุฑุนู ูุฃุฌู ูุณุชูุจู ุฃูุถู.'
    },
    {
      'title': 'ุทูู ุงูุณูุงุก', 
      'icon': '๐ผ',
      'description': 'ุทููู ุงูุฐู ูุงู ูุฌููุง ุตุบูุฑูุง ูู ุนุงุฆูุชูุงุ ูุงุฏูุงู ูู ุงูุณูุงุก ููุถูุก ุญูุงุชูุง. ูุงู ูุฑูุถ ูู ุฃุฑุฌุงุก ุงูุจูุช ุจุงุจุชุณุงูุฉ ูุง ุชูุงุฑู ูุฌููุ ูุญูู ุจูู ูุฏูู ุฃุญูุงููุง ุตุบูุฑุฉ ูุจุฐูุฑ ุชูุชุธุฑ ุงูููู.\n\nูู ูููู ูู ูุชููุน ููู ุดูุฆูุงุ ูุจุช ุนุงุตูุฉ ุงูุญุฑุจ ุนูู ุญูููุง. ูุงู ุณุงูู ููุนุจ ุฃูุงู ุงูููุฒูุ ููุซุฑ ุงูุถุญูุงุช ูุงููุฑุญุ ุญูู ุณูุท ุงููุตู ูุฌุฃุฉ.\n\nูุฑุนุช ุฅูููุ ููู ูู ููู ูู ูุฏูู ุฃู ุฃูุจุนุฏู ุนู ุงูููุช. ุณูุทุช ูุฐููุฉ ูุฑูุจุฉุ ูุญูููุง ุงูููุงุก ุจุนูุฏูุง ุฅูู ุงูุณูุงุก. ูู ูุญุธุฉ ูุงุญุฏุฉุ ุฃุตุจุญ ุณุงูู "ุทูู ุงูุณูุงุก" ุงูุฐู ุงุฑุชูุน ููู ุงูุฃูู.\n\nููู ุฑูุญู ูู ุชุฐูุจ ุจุนูุฏูุงุ ุฅููุง ููุง ุจูููุงุ ุชููู ูู ูููุจูุง ูุซู ุฒูุฑุฉ ุชุชูุชุญ ูุน ูู ููู ุฌุฏูุฏุ ุชุนูููุง ููู ูุญุจ ุฑุบู ุงูุญุฒูุ ูููู ูุณุชูุฑ ุฑุบู ุงูููุฏ.\n\nุณุงูู ูู ุทูู ุงูุณูุงุกุ ุฑูุฒ ุงูุจุฑุงุกุฉ ูุงูุตูุงุกุ ุงูุฐู ุณูุธู ูููููุง ุจุงูุฃูู ูุงูุณูุงู ูููุง ุทุงู ุงูุธูุงู.'
    },
  ];

  // ูุชุบูุฑุงุช ุงูุจุญุซ ูุงูููุชุฑุฉ
  String _searchQuery = '';
  String _selectedTypeFilter = 'ุงููู';
  final List<String> _storyTypes = ['ุงููู', 'ูุฌุงุฉ', 'ูุฒูุญ', 'ุดูุงุฏุฉ', 'ุฃุฎุฑู'];

  @override
  void initState() {
    super.initState();
    _animController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 900),
    );
    _fadeAnim = CurvedAnimation(parent: _animController, curve: Curves.easeIn);
    _slideAnim = Tween<Offset>(begin: const Offset(0, -0.2), end: Offset.zero)
        .animate(CurvedAnimation(parent: _animController, curve: Curves.easeOut));
    _animController.forward();
    _fabAnimController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 250),
      lowerBound: 0.0,
      upperBound: 0.15,
    );
    _fabScaleAnim = Tween<double>(begin: 1.0, end: 1.18).animate(
      CurvedAnimation(parent: _fabAnimController, curve: Curves.easeInOut),
    );
    
    // ุชุญุณูู ุงูุฃุฏุงุก - ุชุญููู ุงูุจูุงูุงุช ุนูุฏ ุจุฏุก ุงูุชุทุจูู
    _fetchStoriesCount();
  }

  @override
  void dispose() {
    _animController.dispose();
    _fabAnimController.dispose();
    super.dispose();
  }

  // ุชุญุณูู ุงูุฃุฏุงุก - ุฅุถุงูุฉ timeout ูcache ููุทูุจุงุช
  Future<void> _fetchStoriesCount() async {
    // ุงูุชุญูู ูู ุงูุชุฎุฒูู ุงููุคูุช
    if (_lastStoriesFetch != null && 
        DateTime.now().difference(_lastStoriesFetch!) < _cacheDuration) {
      return;
    }

    try {
      final snap = await FirebaseFirestore.instance
          .collection('stories')
          .get()
          .timeout(const Duration(seconds: 10));
      
      if (mounted) {
        setState(() {
          _cachedStoriesCount = snap.docs.length;
          _lastStoriesFetch = DateTime.now();
        });
      }
    } catch (e) {
      debugPrint('Error fetching stories count: $e');
      // ูู ุญุงูุฉ ุงูุฎุทุฃุ ุงุณุชุฎุฏู ุงููููุฉ ุงููุฎุฒูุฉ ูุคูุชุงู
    }
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final backgroundColor = isDark ? const Color(0xFF181A20) : const Color(0xFFFAF3E0);
    final textColor = isDark ? Colors.white : const Color(0xFF2C3E50);
    final cardColor = isDark ? const Color(0xFF23262F) : Colors.white;
    
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        backgroundColor: backgroundColor,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          title: Row(
            children: [
              // ุชุญุณูู ุงูุฃุฏุงุก - ุฅุฒุงูุฉ ุงูุตูุฑุฉ ูุชูููู ุงุณุชููุงู ุงูุฐุงูุฑุฉ
              const Icon(Icons.auto_stories, color: Color(0xFFC0392B), size: 36),
              const SizedBox(width: 12),
              Text(
                'ุฃููู ุงูุญุฑุจ',
                style: TextStyle(
                  color: textColor,
                  fontFamily: 'Cairo',
                  fontWeight: FontWeight.bold,
                  fontSize: 24,
                ),
              ),
              const Spacer(),
              Text(
                'ุฃููุงู ุจู ๐๏ธ',
                style: TextStyle(
                  color: isDark ? Colors.white70 : const Color(0xFF273C75),
                  fontFamily: 'Cairo',
                  fontSize: 16,
                ),
              ),
            ],
          ),
          toolbarHeight: 70,
        ),
        body: _buildBody(),
        bottomNavigationBar: ConvexAppBar(
          style: TabStyle.fixedCircle,
          backgroundColor: cardColor,
          activeColor: const Color(0xFFC0392B),
          color: isDark ? Colors.white70 : const Color(0xFF2C3E50),
          items: const [
            TabItem(icon: Icons.home, title: 'ุงูุฑุฆูุณูุฉ'),
            TabItem(icon: Icons.search, title: 'ุงุณุชูุดุงู'),
            TabItem(icon: Icons.add_circle, title: 'ุฃุถู'),
            TabItem(icon: Icons.map, title: 'ุฅููุงู ุบุฒุฉ'),
            TabItem(icon: Icons.person, title: 'ุญุณุงุจู'),
          ],
          initialActiveIndex: _selectedIndex,
          onTap: (int i) async {
            if (i == 2) {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const AddStoryScreen()),
              );
            } else {
              setState(() {
                _selectedIndex = i;
              });
            }
          },
        ),
      ),
    );
  }

  Widget _buildBody() {
    if (_selectedIndex == 0) {
      // ูุญุชูู ุงูุฑุฆูุณูุฉ
      return SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ุจุทุงูุฉ ุฏุนูุฉ ูููุดุงุฑูุฉ
              FadeTransition(
                opacity: _fadeAnim,
                child: SlideTransition(
                  position: _slideAnim,
                  child: _buildInviteCard(),
                ),
              ),
              const SizedBox(height: 32),
              // ูุณู ุญูุงูุงุช ุงูุดูุฏุงุก
              _buildMartyrsSection(),
              const SizedBox(height: 32),
              // ุฅุญุตุงุฆูุงุช ูุชูุงุนู
              _buildStatsSection(),
              const SizedBox(height: 80),
            ],
          ),
        ),
      );
    } else if (_selectedIndex == 1) {
      // ูุณู ุงุณุชูุดุงู ุงููุตุต
      return const ExploreScreen();
    } else if (_selectedIndex == 3) {
      // ูุณู ุงูุฅููุงู
      return const InspirationScreen();
    } else if (_selectedIndex == 4) {
      // ูุณู ุงูููู ุงูุดุฎุตู
      return const ProfileScreen();
    }
    return const SizedBox.shrink();
  }

  Widget _buildInviteCard() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24), 
      decoration: BoxDecoration(
        color: const Color(0xFFC0392B).withOpacity(isDark ? 0.95 : 0.93),
        borderRadius: BorderRadius.circular(28),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFFC0392B).withOpacity(isDark ? 0.2 : 0.13),
            blurRadius: 18,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: const [
              Icon(Icons.mic, color: Colors.white, size: 36),
              SizedBox(width: 12),
              Icon(Icons.edit, color: Colors.white, size: 32),
            ],
          ),
          const SizedBox(height: 18),
          const Text(
            'ูู ุฃูุช ูุงุฌูุ ูุงุฒุญุ ุฃู ููุฏุช ูู ุชุญุจุ',
            style: TextStyle(
              color: Colors.white,
              fontFamily: 'Cairo',
              fontWeight: FontWeight.bold,
              fontSize: 20,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          const Text(
            'ุดุงุฑู ุญูุงูุชู... ูู ูููุฉ ุชุตูุน ุฃุซุฑูุง.',
            style: TextStyle(
              color: Color(0xFFF6B93B),
              fontFamily: 'Cairo',
              fontSize: 15,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFFF6B93B),
                foregroundColor: const Color(0xFFC0392B),
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                elevation: 2,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const AddStoryScreen()),
                );
              },
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text(
                    'ุงุญูู ูุตุชู ุงูุขู',
                    style: TextStyle(
                      fontFamily: 'Cairo',
                      fontWeight: FontWeight.bold,
                      fontSize: 17,
                    ),
                  ),
                  const SizedBox(width: 8),
                  const Text('๐ฃ', style: TextStyle(fontSize: 20)),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMartyrsSection() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final cardColor = isDark ? const Color(0xFF23262F) : const Color(0xFFF5F5F5);
    
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(22),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : const Color(0xFF2C3E50).withOpacity(0.06),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.favorite, color: Color(0xFFC0392B), size: 24),
              const SizedBox(width: 8),
              const Text(
                'ูุตุต ูู ุฑุญููุง ูุฃุซุฑูู ุจุงูู',
                style: TextStyle(
                  fontFamily: 'Cairo',
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                  color: Color(0xFFC0392B),
                ),
              ),
            ],
          ),
          const SizedBox(height: 14),
          StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance
                .collection('stories')
                .orderBy('timestamp', descending: true)
                .limit(10)
                .snapshots(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }
              
              // ููุชุฑุฉ ุงููุตุต ูู ููุน ุดูุงุฏุฉ ูู Firebase
              List<Map<String, dynamic>> firebaseMartyrStories = [];
              if (snapshot.hasData && snapshot.data!.docs.isNotEmpty) {
                firebaseMartyrStories = snapshot.data!.docs.where((doc) {
                  final story = doc.data() as Map<String, dynamic>;
                  return story['type'] == 'ุดูุงุฏุฉ';
                }).take(5).map((doc) {
                  final story = doc.data() as Map<String, dynamic>;
                  return {
                    ...story,
                    'id': doc.id,
                    'isFromFirebase': true,
                  };
                }).toList();
              }

              // ุฏูุฌ ุงููุตุต ุงูุซุงุจุชุฉ ูุน ูุตุต Firebase
              List<Map<String, dynamic>> allMartyrStories = [
                ...martyrsStories.map((story) => {
                  ...story,
                  'isFromFirebase': false,
                }),
                ...firebaseMartyrStories,
              ];

              return SizedBox(
                height: 110,
                child: ListView.separated(
                  scrollDirection: Axis.horizontal,
                  itemCount: allMartyrStories.length,
                  separatorBuilder: (_, __) => const SizedBox(width: 16),
                  itemBuilder: (context, i) {
                    final story = allMartyrStories[i];
                    final isFromFirebase = story['isFromFirebase'] ?? false;
                    
                    return GestureDetector(
                      onTap: () {
                        if (isFromFirebase) {
                          // ูุตุฉ ูู Firebase
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => StoryDetailScreen(
                                storyId: story['id'],
                                storyData: story,
                              ),
                            ),
                          );
                        } else {
                          // ูุตุฉ ุซุงุจุชุฉ
                          final mockStory = {
                            'name': story['title'] ?? 'ูุตุฉ ุดููุฏ',
                            'text': story['description'] ?? 'ูุฐู ูุตุฉ ูู ูุตุต ุงูุดูุฏุงุก ุงูุฐูู ุฑุญููุง ุนูุง ูููู ุฃุซุฑูู ุจุงูู ูู ูููุจูุง. ูุตุต ูู ุงูุดุฌุงุนุฉ ูุงูุฅููุงู ูุงูุชุถุญูุฉ ูู ุฃุฌู ุงููุทู.',
                            'type': 'ุดูุงุฏุฉ',
                            'timestamp': DateTime.now(),
                          };
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => StoryDetailScreen(
                                storyId: 'martyr_story_$i',
                                storyData: mockStory,
                              ),
                            ),
                          );
                        }
                      },
                      child: Container(
                        width: 120,
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: const Color(0xFFC0392B).withOpacity(0.07),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            if (isFromFirebase) ...[
                              CircleAvatar(
                                radius: 20,
                                backgroundColor: const Color(0xFFC0392B),
                                child: Text(
                                  story['name'] != null && story['name'].toString().isNotEmpty
                                      ? story['name'].toString().substring(0, 1)
                                      : '?',
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                    fontFamily: 'Cairo',
                                  ),
                                ),
                              ),
                            ] else ...[
                              Text(
                                story['icon'] ?? '๐ฏ๏ธ',
                                style: const TextStyle(fontSize: 30),
                              ),
                            ],
                            const SizedBox(height: 6),
                            Flexible(
                              child: Text(
                                isFromFirebase 
                                    ? (story['name'] ?? 'ูุตุฉ ุดูุงุฏุฉ')
                                    : (story['title'] ?? ''),
                                style: const TextStyle(
                                  fontFamily: 'Cairo',
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                  color: Color(0xFF2C3E50),
                                ),
                                textAlign: TextAlign.center,
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildStatsSection() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final cardColor = isDark ? const Color(0xFF23262F) : Colors.white;
    final textColor = isDark ? Colors.white : const Color(0xFF2C3E50);
    
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(22),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : const Color(0xFF2C3E50).withOpacity(0.06),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.analytics, color: Color(0xFFC0392B), size: 24),
              const SizedBox(width: 8),
              Text(
                'ุฅุญุตุงุฆูุงุช ูุชูุงุนู',
                style: TextStyle(
                  fontFamily: 'Cairo',
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                  color: textColor,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance.collection('stories').snapshots(),
            builder: (context, snapshot) {
              int totalStories = 0;
              int martyrStories = 0;
              int survivalStories = 0;
              int displacementStories = 0;

              if (snapshot.hasData) {
                totalStories = snapshot.data!.docs.length;
                for (var doc in snapshot.data!.docs) {
                  final story = doc.data() as Map<String, dynamic>;
                  switch (story['type']) {
                    case 'ุดูุงุฏุฉ':
                      martyrStories++;
                      break;
                    case 'ูุฌุงุฉ':
                      survivalStories++;
                      break;
                    case 'ูุฒูุญ':
                      displacementStories++;
                      break;
                  }
                }
              }

              return Row(
                children: [
                  Expanded(
                    child: _buildStatCard(
                      icon: Icons.auto_stories,
                      title: 'ุฅุฌูุงูู ุงููุตุต',
                      value: totalStories.toString(),
                      color: const Color(0xFF2980B9),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildStatCard(
                      icon: Icons.favorite,
                      title: 'ูุตุต ุดูุงุฏุฉ',
                      value: martyrStories.toString(),
                      color: const Color(0xFFC0392B),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildStatCard(
                      icon: Icons.psychology,
                      title: 'ูุตุต ูุฌุงุฉ',
                      value: survivalStories.toString(),
                      color: const Color(0xFF27AE60),
                    ),
                  ),
                ],
              );
            },
          ),
          const SizedBox(height: 16),
          GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const AddStoryScreen()),
              );
            },
            child: Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFC0392B), Color(0xFFE74C3C)],
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                ),
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFFC0392B).withOpacity(0.3),
                    blurRadius: 8,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: const [
                  Icon(Icons.add_circle, color: Colors.white, size: 24),
                  SizedBox(width: 8),
                  Text(
                    'ุฃุถู ูุตุชู ุงูุขู',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'Cairo',
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
  }) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final textColor = isDark ? Colors.white : const Color(0xFF2C3E50);
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(isDark ? 0.1 : 0.05),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: color.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 28),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'Cairo',
              fontWeight: FontWeight.bold,
              fontSize: 20,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: TextStyle(
              fontFamily: 'Cairo',
              fontSize: 12,
              color: textColor,
            ),
            textAlign: TextAlign.center,
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  Widget _buildRecentStoryCard(Map<String, String> story) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final cardColor = isDark ? const Color(0xFF23262F) : Colors.white;
    final textColor = isDark ? Colors.white : const Color(0xFF2C3E50);
    final subtitleColor = isDark ? Colors.white70 : const Color(0xFF555555);
    
    return Container(
      width: 180,
      margin: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : const Color(0xFF2C3E50).withOpacity(0.08),
            blurRadius: 12,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  radius: 26,
                  backgroundColor: const Color(0xFFF6B93B),
                  backgroundImage: AssetImage(story['image'] ?? ''),
                  child: story['image'] == null ? const Icon(Icons.person, size: 26, color: Color(0xFF2C3E50)) : null,
                ),
                const Spacer(),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                  decoration: BoxDecoration(
                    color: const Color(0xFFC0392B).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    story['type'] ?? '',
                    style: const TextStyle(
                      fontFamily: 'Cairo',
                      fontSize: 12,
                      color: Color(0xFFC0392B),
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 10),
            Text(
              story['title'] ?? '',
              style: TextStyle(
                fontFamily: 'Cairo',
                fontWeight: FontWeight.bold,
                fontSize: 15,
                color: textColor,
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 4),
            Text(
              story['snippet'] ?? '',
              style: TextStyle(
                fontFamily: 'Cairo',
                fontSize: 13,
                color: subtitleColor,
              ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
            const Spacer(),
            Row(
              children: const [
                Icon(Icons.favorite, color: Color(0xFFC0392B), size: 18),
                SizedBox(width: 6),
                Text('120', style: TextStyle(fontFamily: 'Cairo', fontSize: 12, color: Color(0xFFC0392B))),
                SizedBox(width: 12),
                Icon(Icons.chat_bubble_outline, color: Color(0xFF2C3E50), size: 18),
                SizedBox(width: 6),
                Text('8', style: TextStyle(fontFamily: 'Cairo', fontSize: 12, color: Color(0xFF2C3E50))),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFirestoreStoryCard(Map<String, dynamic> story, {String? storyId}) {
    final typeColor = {
      'ูุฌุงุฉ': Color(0xFF2980B9),
      'ูุฒูุญ': Color(0xFFF6B93B),
      'ุดูุงุฏุฉ': Color(0xFFC0392B),
      'ุฃุฎุฑู': Color(0xFF2C3E50),
    };
    return InkWell(
      onTap: storyId == null ? null : () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => StoryDetailScreen(storyId: storyId, storyData: story),
          ),
        );
      },
      borderRadius: BorderRadius.circular(20),
      child: Container(
        width: double.infinity,
        margin: const EdgeInsets.symmetric(vertical: 4),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF2C3E50).withOpacity(0.08),
              blurRadius: 12,
              offset: const Offset(0, 6),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    radius: 22,
                    backgroundColor: typeColor[story['type']] ?? const Color(0xFF2C3E50),
                    child: Text(
                      story['name'] != null && story['name'].toString().isNotEmpty
                          ? story['name'].toString().substring(0, 1)
                          : '?',
                      style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 20, fontFamily: 'Cairo'),
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                    decoration: BoxDecoration(
                      color: (typeColor[story['type']] ?? const Color(0xFF2C3E50)).withOpacity(0.13),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      story['type'] ?? '',
                      style: TextStyle(
                        fontFamily: 'Cairo',
                        fontSize: 12,
                        color: typeColor[story['type']] ?? const Color(0xFF2C3E50),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 10),
              Text(
                story['name'] ?? '',
                style: const TextStyle(
                  fontFamily: 'Cairo',
                  fontWeight: FontWeight.bold,
                  fontSize: 15,
                  color: Color(0xFF2C3E50),
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 4),
              Text(
                story['text'] ?? '',
                style: const TextStyle(
                  fontFamily: 'Cairo',
                  fontSize: 13,
                  color: Color(0xFF555555),
                ),
                maxLines: 5,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // ุฏุงูุฉ ุจูุงุก ุงูุงุณุชุนูุงู ุญุณุจ ุงูุจุญุซ ูุงูููุชุฑุฉ
  Query _buildStoriesQuery() {
    Query query = FirebaseFirestore.instance.collection('stories').orderBy('timestamp', descending: true);
    if (_selectedTypeFilter != 'ุงููู') {
      query = query.where('type', isEqualTo: _selectedTypeFilter);
    }
    // ุงูุจุญุซ ุจุงูุงุณู ุฃู ูุต ุงููุตุฉ (ูุชู ุนูู ุงูููุงููุช ุจุนุฏ ุงูุฌูุจ)
    return query;
  }
} 